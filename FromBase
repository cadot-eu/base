#!/bin/bash

# Vérifier si le répertoire ../base existe
if [ ! -d "../base" ]; then
    echo "Le répertoire ../base n'existe pas."
    exit 1
fi

# Créer un tableau pour stocker les fichiers à ignorer
IGNORED_FILES=()

# Lire les fichiers à ignorer depuis .ignore s'il existe
if [ -f ".ignore" ]; then
    while IFS= read -r line; do
        # Ignorer les commentaires et lignes vides
        [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
        IGNORED_FILES+=("$line")
    done < .ignore
fi
# on ajoutes des fichiers à ignorer d'office
IGNORED_FILES+=("README.md")

# on copie d'office les fichiers du répertoire templates/dashboard'
rm -rf templates/dashboard/*
cp -r ../base/templates/dashboard/* templates/dashboard
# on copie d'office les fichiers de assets/controllers'
find assets/controllers -maxdepth 1 -type f -delete #pas pas ceus de site
cp -r ../base/assets/controllers/* assets/controllers
# on copie le controller DashboardController
cp ../base/src/Controller/DashboardController.php src/Controller


# Fonction pour vérifier si un fichier doit être ignoré
should_ignore() {
    local file="$1"
    
    # Ignorer le répertoire .git et ses sous-répertoires
    if [[ "$file" == .git/* || "$file" == .git ]]; then
        return 0  # Le fichier doit être ignoré
    fi
    
    for ignored in "${IGNORED_FILES[@]}"; do
        if [[ "$file" == "$ignored" ]]; then
            return 0  # Le fichier doit être ignoré
        fi
    done
    
    return 1  # Le fichier ne doit pas être ignoré
}

# Parcourir tous les fichiers du répertoire ../base (en excluant .git au niveau de find)
find "../base" -type f -not -path "../base/.git/*" -not -path "../base/vendor/*" -not -path "../base/public/assets/*" -not -path "../base/assets/vendor/*" -not -name ".env"  -not -name "compose.yaml" -not -name "compose.override.yaml" -not -name "Caddyfile" -not -name ".phpunit.result*" -not -name ".env.dev" -not -name ".ignore" -not -name ".composer.lock.swp" -not -name ".composer.json.swp" -not -name "composer.lock" -not -path "../base/assets/styles/app.css"| while read -r base_file; do
    # Extraire le chemin relatif
    rel_path="${base_file#../base/}"
    
    # Vérifier si le fichier doit être ignoré
    if should_ignore "$rel_path"; then
        echo "Ignoré: $rel_path"
        continue
    fi
    
    # Chemin du fichier dans le répertoire courant
    current_file="./$rel_path"
    
    if [ -f "$current_file" ]; then
        # Le fichier existe dans le répertoire courant, vérifier s'il est différent
        if ! cmp -s "$base_file" "$current_file"; then
            echo "Le fichier $rel_path est différent, Remplacer la version locale ? (O/n) "
            read -r response </dev/tty  # Force la lecture depuis le terminal
            response=${response,,} # Mettre en minuscule
            if [[ -z "$response" || "$response" == "o" || "$response" == "y" ]]; then
                cp "$base_file" "$current_file"
                echo "$rel_path remplacé."
            fi
        fi
    else
        # Le fichier n'existe pas dans le répertoire courant
        echo "Le fichier $rel_path n'existe pas, copier depuis ../base ? (O/n) " response
        read -r response </dev/tty
        response=${response,,} # Mettre en minuscule
        if [[ -z "$response" || "$response" == "o" || "$response" == "y" ]]; then
            # Créer les répertoires parents si nécessaire
            mkdir -p "$(dirname "$current_file")"
            cp "$base_file" "$current_file"
            echo "$rel_path copié."
        fi
    fi
done

echo "Synchronisation terminée."